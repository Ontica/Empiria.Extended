<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema
    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CantCompareOperands" xml:space="preserve">
    <value>No puedo comparar los operandos '{1}' y '{3}' ya que pertenecen a los tipos de datos {2} y {4} respectivamente y no se ha definido una regla para el operador '{0}' que pueda manipularlos.</value>
  </data>
  <data name="CompileError" xml:space="preserve">
    <value>Ocurrió un problema al intentar compilar la expresión [{0}]. Es probable que exista una inconsistencia en la sintaxis o incompatibilidades entre los tipos de datos involucrados en la misma.</value>
  </data>
  <data name="EndOfLiteralCharNotFound" xml:space="preserve">
    <value>La expresión [{1}] contiene una cadena de caracteres constante que comienza pero no termina con el delimitador ({0}).</value>
  </data>
  <data name="InvalidFunctionArguments" xml:space="preserve">
    <value>Se intentó ejecutar la función [{0}] con {2} parámetro(s), pero la misma tiene definido(s) {1} argumento(s).</value>
  </data>
  <data name="InvalidOperandDataType" xml:space="preserve">
    <value>No puedo aplicar el operador '{0}' sobre la constante o variable '{1}', ya que ésta pertenece al tipo de datos {2}  que no es aplicable a dicho operador.</value>
  </data>
  <data name="InvalidOperator" xml:space="preserve">
    <value>No reconozco el operador '{0}' como un operador válido para la operación.</value>
  </data>
  <data name="InvalidOperatorArgumentsNumber" xml:space="preserve">
    <value>Error de programación. Se intentó ejecutar el operador '{0}' con {2} operandos, pero el mismo tiene definida una aridad de {1}.</value>
  </data>
  <data name="NotWellFormedAssignment" xml:space="preserve">
    <value>No me es posible evaluar la asignación [{0}] debido a que contiene inconsistencias sintácticas.</value>
  </data>
  <data name="NotWellFormedExpression" xml:space="preserve">
    <value>No me es posible evaluar la expresión [{0}] debido a que contiene inconsistencias sintácticas.</value>
  </data>
  <data name="UncompiledExpression" xml:space="preserve">
    <value>Error de programación. Se invocó un método o propiedad que requiere que la expresión o la lista de expresiones sea compilada previamente mediante el método Compile() del objeto Expression o EvaluationContext en cuestión.</value>
  </data>
  <data name="UndefinedGlobalFunction" xml:space="preserve">
    <value>El método que ejecuta la función [{0}] no ha sido definido en el catálogo de funciones globales del evaluador de expresiones.</value>
  </data>
  <data name="UndefinedOperatorArity" xml:space="preserve">
    <value>Error de programación. El programa no puede ejecutar el operador '{0}' ya que tiene una aridad de {1} y el programa no tiene definida la regla para procesar operadores con dicha aridad o número de operandos.</value>
  </data>
  <data name="UndefinedOperatorMethod" xml:space="preserve">
    <value>No se ha definido el método que realiza la operación '{0}'.</value>
  </data>
  <data name="UndefinedOperatorPrecedence" xml:space="preserve">
    <value>Error de programación. No se ha definido la precedencia del operador '{0}'.</value>
  </data>
  <data name="UnloadedFunction" xml:space="preserve">
    <value>No encontré la función [{0}] en la biblioteca de funciones del contexto de evaluación utilizado.</value>
  </data>
  <data name="UnrecognizedOperand" xml:space="preserve">
    <value>No reconozco el símbolo '{0}' como un operando válido.</value>
  </data>
  <data name="UseOfUnassignedVariable" xml:space="preserve">
    <value>Se intentó ejecutar la expresión [{1}], pero la variable '{0}' no tiene asignado ningún valor.</value>
  </data>
  <data name="ZeroDivision" xml:space="preserve">
    <value>Se intentó ejecutar la división pero el denominador es cero. Para evitar que esto ocurra, se puede utilizar la función DIVISIÓN_PROTEGIDA(X,Y,valor si Y es cero) de la lista de funciones matemáticas del sistema Empiria.</value>
  </data>
</root>